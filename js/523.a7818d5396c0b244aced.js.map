{"version":3,"file":"js/523.a7818d5396c0b244aced.js","mappings":"kRAqEA,IAAeA,UAAUC,iBAAmB,SACxCC,EACAC,EACAC,EACAC,EACAC,EAAyE,MAiBzEC,KAAKC,UAAUN,GAfCO,IACZL,EAAYD,GAASM,EACfL,EAAaM,iBAEuB,IAAhCN,EAAaM,gBACnBL,EAASD,EACb,QASgEO,OAAWA,GAAW,GAN1E,CAACC,EAAuBC,KAChCP,GAAmBM,GACnBN,EAAgBM,EAAQE,OAAS,IAAMF,EAAQG,WAAYF,EAC/D,GAIR,EAEA,IAAeb,UAAUgB,kBAAoB,SACzCC,EACAZ,EACAa,EACAC,EAAiE,MAEjE,MAAMf,EAA6B,GAC7BA,EAAaM,eAAiB,EAEpC,IAAK,IAAIP,EAAQ,EAAGA,EAAQ,EAAGA,IAC3BI,KAAKN,iBAAiBiB,EAAMf,GAAQA,EAAOC,EAAaC,EAAUc,EAE1E,EAEA,IAAenB,UAAUoB,iBAAmB,SACxCH,EACAI,EACAhB,EACAa,EACAC,EAAiE,KACjEG,GAEA,MAAMC,EAAmD,GACnDA,EAAcb,eAAiB,EAErC,IAAK,IAAIP,EAAQ,EAAGA,EAAQ,EAAGA,IAC3BI,KAAKiB,gBAAgBN,EAAMf,GAAQA,EAAOoB,EAAcN,EAAOI,EAAShB,EAAUc,EAASG,EAEnG,EAEA,IAAetB,UAAUwB,gBAAkB,SACvCtB,EACAC,EACAoB,EACAN,EACAI,EACAhB,EACAC,EAAyE,KACzEgB,GAEA,MAAMG,GAAmB,UAyBzB,QAAUvB,GAvBMwB,IACZH,EAAapB,GAASuB,EAChBH,EAAcb,iBAEhBO,GACAA,EAAMU,kBAAkBF,GAGe,IAAjCF,EAAcb,gBAAwBL,GAC5CA,EAASgB,EAASE,EACtB,IAGY,CAACK,EAAkBf,KAC3BI,GACAA,EAAMU,kBAAkBF,GAGxBnB,GACAA,EAAgBsB,EAASf,EAC7B,GAG4BI,EAAQA,EAAMY,gBAAkB,KAAMP,GAClEL,GACAA,EAAMa,eAAeL,EAE7B,EAEA,IAAezB,UAAU+B,sBAAwB,SAC7CC,EACAf,EACAC,EACAe,EACAC,EAAyC,KACzCf,EAAiE,KACjEgB,EACAC,EAAuB,KACvBC,GAA6B,EAC7BC,EAAmB,EACnBC,EAAoB,EACpBC,EAAsC,KACtCC,EAAsH,KACtHC,EAAuG,KACvGC,GAAgB,EAChBC,EAAoC,MAEpC,MAAMvB,EAAUmB,GAAsB,IAAI,IAAgBjC,KAAM,GAChEc,EAAQwB,QAAS,EACjBxB,EAAQnB,IAAM8B,EACdX,EAAQyB,iBAAmBb,EAC3BZ,EAAQ0B,oBAAsBT,EAC9BjB,EAAQ2B,qBAAuBT,EAC/BlB,EAAQ4B,iBAAmBN,GAAiBpC,KAAK2C,MAAMC,qBAAuB5C,KAAK6C,QAAU,GAAK7C,KAAK8C,YAAcpB,GACjHZ,IAAYmB,IACZnB,EAAQiC,MAAQtB,EAAQuB,UAAU,EAAG,KAGpChD,KAAKiD,0BACNnC,EAAQoC,WAAarB,EACrBf,EAAQqC,OAASxC,EACjBG,EAAQsC,QAAUf,GAGtB,MAAMgB,EAAkB5B,EACpBzB,KAAKsD,uBAAyBrB,IAC9BR,EAAUzB,KAAKsD,qBAAqB7B,IAGxC,MAAM8B,EAAY1B,GCxMf,SAA6BlC,GAChC,MAAM6D,EAAsB7D,EAAI8D,MAAM,KAAK,GACrCC,EAAUF,EAAoBG,YAAY,KAEhD,OADkBD,GAAW,EAAIF,EAAoBR,UAAUU,GAASE,cAAgB,EAE5F,CDmMyCC,CAAoBpC,GAEnDqC,GAAgB,QAA4BP,GAE5CQ,EAAkB,CAAC1D,EAAuBC,KACxCmB,IAAY4B,EACRzC,GAAWP,GACXO,EAAQP,EAAQE,OAAS,IAAMF,EAAQG,WAAYF,IAIvD,IAAO0D,KAAK,kBAAkBvC,0BAAgC4B,KAC9DrD,KAAKwB,sBACD6B,EACA3C,EACAC,IACEe,EACFC,EACAf,EACAgB,EACAC,EACAC,EACAC,EACAC,EACAlB,EACAoB,EACAC,EACAC,EACAC,GAER,EAGJ,GAAIyB,EACAA,EAAcG,MAAMC,IAChB,MAAMC,EAAcjE,IACZgC,GACAA,EAA2BpB,EAASZ,GAExCgE,EAAOE,aAAalE,EAAMY,EAASgB,EAAmBH,EAAQf,EAAQ,EAEtEyB,EACA8B,EAAW9B,GACJ1B,GAA0B,IAAjBA,EAAM0D,OAClBH,EAAOI,gBACPtE,KAAKS,kBAAkBC,GAAQ6D,GAAWJ,EAAWI,EAAOC,KAAKC,GAAU,IAAIC,WAAWD,OAAU9D,EAAOC,GAEvGA,EACAA,EAAQ,4CAER,IAAOoD,KAAK,6CAIpBhE,KAAKC,UAAUwB,GAAUvB,GAASiE,EAAW,IAAIO,WAAWxE,UAAuBE,OAAWA,GAAW,EAAM2D,EACnH,QAED,CACH,IAAKpD,GAA0B,IAAjBA,EAAM0D,OAChB,MAAM,IAAIM,MAAM,4FAGpB3E,KAAKa,iBACDH,EACAI,GACA,CAACA,EAA0B8D,KACnBzC,GACAA,EAAarB,EAAS8D,EAC1B,GAEJjE,EACAC,EAER,CAIA,OAFAZ,KAAK6E,uBAAuBC,KAAKhE,GAE1BA,CACX,EE3QA,MAOIiE,EAAmB,OAsBnBC,EAAiB,OAErB,SAASC,EAAcC,GACnB,OAAOA,EAAMC,WAAW,IAAMD,EAAMC,WAAW,IAAM,IAAMD,EAAMC,WAAW,IAAM,KAAOD,EAAMC,WAAW,IAAM,GACpH,CAMA,MAAMC,EAAcH,EAAc,QAC5BI,EAAcJ,EAAc,QAC5BK,EAAcL,EAAc,QAC5BM,EAAcN,EAAc,QA2F3B,MAAMO,EAWF,iBAAOC,CAAWvF,GACrB,MAAMwF,EAAS,IAAIC,WAAWzF,EAAKmC,OAAQnC,EAAK0F,WA/FhC,IAgGVC,EAAiB,IAAIF,WAAWzF,EAAKmC,OAAQnC,EAAK0F,WAAYE,IAEpE,IAAIC,EAAc,EACdL,EA7FM,GA6FcX,IACpBgB,EAAcC,KAAKC,IAAI,EAAGP,EA1Fd,KA6FhB,MAAMQ,EAASR,EA1FF,IA2FPS,EAAaD,IAAWX,EAAcM,EAjF7B,IAiF8D,EAC7E,IAAIO,EAAc,EAElB,OAAQF,GACJ,KAnHwB,IAoHpBE,EAAc,EACd,MACJ,KArHwB,IAsHpBA,EAAc,EACd,MACJ,KAAKb,EACD,GAtHuB,KAsHnBY,EAA+C,CAC/CC,EAAc,EACd,KACJ,CACA,GA3HuB,IA2HnBD,EAA+C,CAC/CC,EAAc,EACd,KACJ,EAGR,MAAO,CACHC,MAAOX,EAtHD,GAuHNY,OAAQZ,EAxHD,GAyHPK,YAAaA,EACbQ,WAzJM,GAyJKb,EArHH,KAsHRc,QAzJG,IAyJKd,EAtHA,KAuHRe,aAAcf,EAvHN,IAuH4BV,KAAoBA,EACxD1C,SAvKa,KAuKJoD,EAhHH,KAiHNgB,aAAcR,IAAWd,GAAec,IAAWb,GAAea,IAAWZ,EAC7Ea,WAAYA,EACZC,YAAaA,EAErB,CAEQ,0CAAOO,CAAoCN,EAAeC,EAAgBM,EAAoBC,EAAoBC,EAA0BC,GAChJ,MAAMC,EAAY,IAAIC,aAAaJ,GAC7BK,EAAU,IAAIC,YAAYL,EAAaF,GAC7C,IAAIhH,EAAQ,EACZ,IAAK,IAAIwH,EAAI,EAAGA,EAAId,EAAQc,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIhB,EAAOgB,IAAK,CAC5B,MAAMC,EAA2B,GAAjBD,EAAID,EAAIf,GACxBW,EAAUpH,IAAS,QAAcsH,EAAQI,IACzCN,EAAUpH,EAAQ,IAAK,QAAcsH,EAAQI,EAAS,IACtDN,EAAUpH,EAAQ,IAAK,QAAcsH,EAAQI,EAAS,IAClD9B,EAAS+B,uBACTP,EAAUpH,EAAQ,GAAKmH,EAEvBC,EAAUpH,EAAQ,IAAK,QAAcsH,EAAQI,EAAS,IAE1D1H,GAAS,CACb,CAGJ,OAAOoH,CACX,CAEQ,mCAAOQ,CAA6BnB,EAAeC,EAAgBM,EAAoBC,EAAoBC,EAA0BC,GACzI,GAAIvB,EAAS+B,uBAAwB,CACjC,MAAMP,EAAY,IAAIG,YAAYN,GAC5BK,EAAU,IAAIC,YAAYL,EAAaF,GAC7C,IAAIhH,EAAQ,EACZ,IAAK,IAAIwH,EAAI,EAAGA,EAAId,EAAQc,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIhB,EAAOgB,IAAK,CAC5B,MAAMC,EAA2B,GAAjBD,EAAID,EAAIf,GACxBW,EAAUpH,GAASsH,EAAQI,GAC3BN,EAAUpH,EAAQ,GAAKsH,EAAQI,EAAS,GACxCN,EAAUpH,EAAQ,GAAKsH,EAAQI,EAAS,GACxCN,EAAUpH,EAAQ,IAAK,QAAYmH,GACnCnH,GAAS,CACb,CAGJ,OAAOoH,CACX,CAEA,OAAO,IAAIG,YAAYL,EAAaF,EAAYC,EACpD,CAEQ,+BAAOY,CAAyBpB,EAAeC,EAAgBM,EAAoBC,EAAoBC,EAA0BC,GACrI,GAAIvB,EAAS+B,uBAAwB,CACjC,MAAMP,EAAY,IAAIC,aAAaJ,GAC7BK,EAAU,IAAID,aAAaH,EAAaF,GAC9C,IAAIhH,EAAQ,EACZ,IAAK,IAAIwH,EAAI,EAAGA,EAAId,EAAQc,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIhB,EAAOgB,IAAK,CAC5B,MAAMC,EAA2B,GAAjBD,EAAID,EAAIf,GACxBW,EAAUpH,GAASsH,EAAQI,GAC3BN,EAAUpH,EAAQ,GAAKsH,EAAQI,EAAS,GACxCN,EAAUpH,EAAQ,GAAKsH,EAAQI,EAAS,GACxCN,EAAUpH,EAAQ,GAAKmH,EACvBnH,GAAS,CACb,CAGJ,OAAOoH,CACX,CACA,OAAO,IAAIC,aAAaH,EAAaF,EAAYC,EACrD,CAEQ,0CAAOa,CAAoCrB,EAAeC,EAAgBM,EAAoBC,EAAoBC,EAA0BC,GAChJ,MAAMC,EAAY,IAAIG,YAAYN,GAC5BK,EAAU,IAAID,aAAaH,EAAaF,GAC9C,IAAIhH,EAAQ,EACZ,IAAK,IAAIwH,EAAI,EAAGA,EAAId,EAAQc,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIhB,EAAOgB,IACvBL,EAAUpH,IAAS,QAAYsH,EAAQtH,IACvCoH,EAAUpH,EAAQ,IAAK,QAAYsH,EAAQtH,EAAQ,IACnDoH,EAAUpH,EAAQ,IAAK,QAAYsH,EAAQtH,EAAQ,IAC/C4F,EAAS+B,uBACTP,EAAUpH,EAAQ,IAAK,QAAYmH,GAEnCC,EAAUpH,EAAQ,IAAK,QAAYsH,EAAQtH,EAAQ,IAEvDA,GAAS,EAIjB,OAAOoH,CACX,CAEQ,qCAAOW,CAA+BtB,EAAeC,EAAgBM,EAAoBC,EAAoBC,EAA0BC,GAC3I,MAAMC,EAAY,IAAItC,WAAWmC,GAC3BK,EAAU,IAAID,aAAaH,EAAaF,GAC9C,IAAIhH,EAAQ,EACZ,IAAK,IAAIwH,EAAI,EAAGA,EAAId,EAAQc,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIhB,EAAOgB,IAAK,CAC5B,MAAMC,EAA2B,GAAjBD,EAAID,EAAIf,GACxBW,EAAUpH,GAAkC,KAAzB,QAAMsH,EAAQI,IACjCN,EAAUpH,EAAQ,GAAkC,KAA7B,QAAMsH,EAAQI,EAAS,IAC9CN,EAAUpH,EAAQ,GAAkC,KAA7B,QAAMsH,EAAQI,EAAS,IAC1C9B,EAAS+B,uBACTP,EAAUpH,EAAQ,GAAKmH,EAEvBC,EAAUpH,EAAQ,GAAkC,KAA7B,QAAMsH,EAAQI,EAAS,IAElD1H,GAAS,CACb,CAGJ,OAAOoH,CACX,CAEQ,yCAAOY,CAAmCvB,EAAeC,EAAgBM,EAAoBC,EAAoBC,EAA0BC,GAC/I,MAAMC,EAAY,IAAItC,WAAWmC,GAC3BK,EAAU,IAAIC,YAAYL,EAAaF,GAC7C,IAAIhH,EAAQ,EACZ,IAAK,IAAIwH,EAAI,EAAGA,EAAId,EAAQc,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIhB,EAAOgB,IAAK,CAC5B,MAAMC,EAA2B,GAAjBD,EAAID,EAAIf,GACxBW,EAAUpH,GAAiD,KAAxC,SAAM,QAAcsH,EAAQI,KAC/CN,EAAUpH,EAAQ,GAAiD,KAA5C,SAAM,QAAcsH,EAAQI,EAAS,KAC5DN,EAAUpH,EAAQ,GAAiD,KAA5C,SAAM,QAAcsH,EAAQI,EAAS,KACxD9B,EAAS+B,uBACTP,EAAUpH,EAAQ,GAAKmH,EAEvBC,EAAUpH,EAAQ,GAAiD,KAA5C,SAAM,QAAcsH,EAAQI,EAAS,KAEhE1H,GAAS,CACb,CAGJ,OAAOoH,CACX,CAEQ,0BAAOa,CACXxB,EACAC,EACAM,EACAC,EACAC,EACAgB,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAY,IAAIxD,WAAWmC,GAC3BK,EAAU,IAAIxC,WAAWoC,EAAaF,GAC5C,IAAIhH,EAAQ,EACZ,IAAK,IAAIwH,EAAI,EAAGA,EAAId,EAAQc,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIhB,EAAOgB,IAAK,CAC5B,MAAMC,EAA2B,GAAjBD,EAAID,EAAIf,GAExB6B,EAAUtI,GAASsH,EAAQI,EAASQ,GACpCI,EAAUtI,EAAQ,GAAKsH,EAAQI,EAASS,GACxCG,EAAUtI,EAAQ,GAAKsH,EAAQI,EAASU,GACxCE,EAAUtI,EAAQ,GAAKsH,EAAQI,EAASW,GACxCrI,GAAS,CACb,CAGJ,OAAOsI,CACX,CAEQ,4BAAOC,CAAsBjD,GACjC,OAAc,IAAVA,GAAyB,MAAVA,IAA4B,WAAXA,EACzB,EAGJ,EAAIM,EAAS2C,sBAAsBjD,GAAS,EACvD,CAEQ,yBAAOkD,CACX/B,EACAC,EACAM,EACAC,EACAC,EACAgB,EACAC,EACAC,GAEA,MAAME,EAAY,IAAIxD,WAAWmC,GAC3BK,EAAU,IAAIxC,WAAWoC,EAAaF,GAC5C,IAAIhH,EAAQ,EACZ,IAAK,IAAIwH,EAAI,EAAGA,EAAId,EAAQc,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIhB,EAAOgB,IAAK,CAC5B,MAAMC,EAA2B,GAAjBD,EAAID,EAAIf,GAExB6B,EAAUtI,GAASsH,EAAQI,EAASQ,GACpCI,EAAUtI,EAAQ,GAAKsH,EAAQI,EAASS,GACxCG,EAAUtI,EAAQ,GAAKsH,EAAQI,EAASU,GACxCpI,GAAS,CACb,CAGJ,OAAOsI,CACX,CAEQ,+BAAOG,CAAyBhC,EAAeC,EAAgBM,EAAoBC,EAAoBC,GAC3G,MAAMoB,EAAY,IAAIxD,WAAWmC,GAC3BK,EAAU,IAAIxC,WAAWoC,EAAaF,GAC5C,IAAIhH,EAAQ,EACZ,IAAK,IAAIwH,EAAI,EAAGA,EAAId,EAAQc,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIhB,EAAOgB,IAAK,CAC5B,MAAMC,EAASD,EAAID,EAAIf,EACvB6B,EAAUtI,GAASsH,EAAQI,GAC3B1H,GACJ,CAGJ,OAAOsI,CACX,CAMO,sBAAOI,CACVC,EACAzH,EACAZ,EACAsI,EACAC,EACAC,EACAC,GAAW,EACXC,EACAC,GAA2B,GAE3B,IAAIC,EAA6D,KAC7DN,EAAKO,sBACLD,EAA2B,IAE/B,MAAME,IAAQT,EAAOU,UAAUC,KAG/BpI,EAAQyB,gBAAkBkG,EAE1B,MAAM/C,EAAS,IAAIC,WAAWzF,EAAKmC,OAAQnC,EAAK0F,WApXhC,IAqXhB,IAAIM,EACAG,EACAC,EAEAM,EACAsB,EAAuBnC,EAAqBoD,EAF5CtC,EAAqB,EAGrBuC,EAA2B,EAC3BC,EAAa,EAEjB,GAhbU,YAgbN3D,EA3XM,GA6XN,YADA,IAAOf,MAAM,sCAIjB,IAAK6D,EAAKjC,WAAaiC,EAAKhC,QAAUgC,EAAK/B,YAEvC,YADA,IAAO9B,MAAM,oEAIjB,GAAI6D,EAAK9B,eAAiBsC,EAEtB,YADA,IAAOrE,MAAM,2DAIjB,IAAI2E,EAAM5D,EA/XC,IAgYXkB,EAAalB,EAzYJ,GAyYuB,EAEhC,IAAI6D,GAAiB,EAErB,GAAIf,EAAKjC,SAEL,OADAL,EAASR,EAtYA,IAuYDQ,GACJ,KAAKd,EACDiE,EAAa,EACbD,EAA2B,MAC3B,MACJ,KAAK/D,EACDgE,EAAa,GACbD,EAA2B,MAC3B,MACJ,KAAK9D,EACD+D,EAAa,GACbD,EAA2B,MAC3B,MACJ,KAxaoB,IAyahBG,GAAiB,EACjBD,EAAM,GACN,MACJ,KA3aoB,IA4ahBC,GAAiB,EACjBD,EAAM,IACN,MACJ,KAAK/D,EAAa,CAEdqB,GAAc,GAEd,IAAI4C,GAAY,EAChB,OAAQhB,EAAKrC,YACT,KAlbe,GAmbXoD,GAAiB,EACjBD,EAAM,GACNE,GAAY,EACZ,MACJ,KAxbe,EAybXD,GAAiB,EACjBD,EAAM,IACNE,GAAY,EACZ,MACJ,KA3bW,GA4bPhB,EAAKhC,OAAQ,EACbgC,EAAKjC,UAAW,EAChB+C,EAAM,GACNE,GAAY,EAIpB,GAAIA,EACA,KAER,CAEA,QAEI,YADA,IAAO7E,MAAM,CAAC,4BAtdXO,EAsdqDgB,EArdjEuD,OAAOC,aAAqB,IAARxE,EAAeA,GAAS,EAAK,IAAOA,GAAS,GAAM,IAAOA,GAAS,GAAM,QADxG,IAAuBA,EA2df,MAAM4C,EAAUtC,EAAS2C,sBAAsBzC,EA7brC,KA8bJqC,EAAUvC,EAAS2C,sBAAsBzC,EA7brC,KA8bJsC,EAAUxC,EAAS2C,sBAAsBzC,EA7brC,KA8bJuC,EAAUzC,EAAS2C,sBAAsBzC,EA7brC,KA+bN6D,IACAH,EAA2Bb,EAAOoB,kCAAkCnB,EAAKpC,cAG7EL,EAAc,EACVL,EAhdM,GAgdcX,IAAoC,IAAhB0D,IACxC1C,EAAcC,KAAKC,IAAI,EAAGP,EA7cd,KAgdhB,MAAMkE,EAAYhB,GAAe,EAC3BiB,EAAOtB,EAAOU,UACpB,IAAK,IAAIa,EAAOF,EAAWE,EAAOpB,EAAOoB,IAAQ,CAI7C,IAHAzD,EAAQX,EArdF,GAsdNY,EAASZ,EAvdF,GAydFyD,EAAM,EAAGA,EAAMpD,IAAeoD,EAAK,CACpC,IAAkB,IAAdR,GAAmBA,IAAaQ,EAAK,CAErC,MAAMY,GAAkB,IAAdpB,EAAkBQ,EAAM,EAElC,IAAKX,EAAK9B,cAAgB8B,EAAKjC,SAAU,CACrCzF,EAAQc,OAAS,EACjBiF,EAAaR,EAAQC,EAAS,EAC9B,IAAI0D,EAAwC,KAE5C,GAAIzB,EAAO0B,QAAU1B,EAAO2B,gBAAmBL,EAAKM,mBAAqBN,EAAKO,aAE9D,MAARd,GACAU,EAAaxE,EAASmC,+BAA+BtB,EAAOC,EAAQpG,EAAK0F,WAAagB,EAAYC,EAAY3G,EAAKmC,OAAQ0H,GACvHjB,GAAiC,GAALiB,GAC5BjB,EAAyBhE,KAAKU,EAASiC,yBAAyBpB,EAAOC,EAAQpG,EAAK0F,WAAagB,EAAYC,EAAY3G,EAAKmC,OAAQ0H,KAE3H,KAART,IACPU,EAAaxE,EAASoC,mCAAmCvB,EAAOC,EAAQpG,EAAK0F,WAAagB,EAAYC,EAAY3G,EAAKmC,OAAQ0H,GAC3HjB,GAAiC,GAALiB,GAC5BjB,EAAyBhE,KACrBU,EAASmB,oCAAoCN,EAAOC,EAAQpG,EAAK0F,WAAagB,EAAYC,EAAY3G,EAAKmC,OAAQ0H,KAK/HjJ,EAAQuJ,KAAO,MACZ,CACH,MAAMC,EAAiBT,EAAKO,eAAkBvB,GAA4BgB,EAAKU,8BAAiC1B,GAC1G2B,EAAqBX,EAAKM,mBAAsBtB,GAA4BgB,EAAKY,kCAAqC5B,GAEtH6B,GACO,MAARpB,GAAwB,KAARA,IAAekB,IAAwBF,EAClD,GACS,KAARhB,GAAuB,MAARA,IAAgBgB,IAAoBE,EAClD,EACA,EAEZ,IAAIG,EACAC,EAEA,KAEJ,GACS,MADDtB,EAEA,OAAQoB,GACJ,KAAK,EACDC,EAAanF,EAASiC,yBACtBmD,EAAuB,KACvB,MACJ,KAAK,EACDD,EAAanF,EAASkC,oCACtBkD,EAAuBpF,EAASiC,yBAChC,MACJ,KAAK,EACDkD,EAAanF,EAASmC,+BACtBiD,EAAuBpF,EAASiC,8BAOxC,OAAQiD,GACJ,KAAK,EACDC,EAAanF,EAASmB,oCACtBiE,EAAuB,KACvB,MACJ,KAAK,EACDD,EAAanF,EAASgC,6BACtBoD,EAAuBpF,EAASmB,oCAChC,MACJ,KAAK,EACDgE,EAAanF,EAASoC,mCACtBgD,EAAuBpF,EAASmB,oCAOhD7F,EAAQuJ,KAAOK,EAEfV,EAAaW,EAAWtE,EAAOC,EAAQpG,EAAK0F,WAAagB,EAAYC,EAAY3G,EAAKmC,OAAQ0H,GAE1FjB,GAAiC,GAALiB,GAC5BjB,EAAyBhE,KACrB8F,EAAuBA,EAAqBvE,EAAOC,EAAQpG,EAAK0F,WAAagB,EAAYC,EAAY3G,EAAKmC,OAAQ0H,GAAKC,EAGnI,CAEIA,GACAzB,EAAOsC,6BAA6B/J,EAASkJ,EAAYF,EAAMC,EAEvE,MAAO,GAAIvB,EAAKhC,MACZ1F,EAAQuJ,KAAO,EACH,KAARf,GACAxI,EAAQc,OAAS,EACjBiF,EAAaR,EAAQC,EAAS,EAC9B4B,EAAY1C,EAAS4C,mBAAmB/B,EAAOC,EAAQpG,EAAK0F,WAAagB,EAAYC,EAAY3G,EAAKmC,OAAQyF,EAASC,EAASC,GAChIO,EAAOsC,6BAA6B/J,EAASoH,EAAW4B,EAAMC,KAG9DjJ,EAAQc,OAAS,EACjBiF,EAAaR,EAAQC,EAAS,EAC9B4B,EAAY1C,EAASqC,oBAAoBxB,EAAOC,EAAQpG,EAAK0F,WAAagB,EAAYC,EAAY3G,EAAKmC,OAAQyF,EAASC,EAASC,EAASC,GAC1IM,EAAOsC,6BAA6B/J,EAASoH,EAAW4B,EAAMC,SAE/D,GAAIvB,EAAK/B,YAAa,CACzB,MAAMqE,EAAkBvC,EAAOwC,uBACzBC,EAAkB3E,EAExBQ,EADsBb,KAAKiF,OAAO5E,EAAQyE,EAAkB,GAAKA,GAAmBA,GACtDxE,EAAS,GAAK0E,EAE5C9C,EAAY1C,EAAS6C,yBAAyBhC,EAAOC,EAAQpG,EAAK0F,WAAagB,EAAYC,EAAY3G,EAAKmC,QAC5GvB,EAAQc,OAAS,EACjBd,EAAQuJ,KAAO,EAEf9B,EAAOsC,6BAA6B/J,EAASoH,EAAW4B,EAAMC,EAClE,MACIlD,EAAgBb,KAAKC,IAAI,EAAGI,GAAS,EAAKL,KAAKC,IAAI,EAAGK,GAAW,EAAK+C,EACtEnB,EAAY,IAAIxD,WAAWxE,EAAKmC,OAAQnC,EAAK0F,WAAagB,EAAYC,GAEtE/F,EAAQuJ,KAAO,EACf9B,EAAO2C,uCAAuCpK,EAASsI,EAA0B/C,EAAOC,EAAQ4B,EAAW4B,EAAMC,EAEzH,CACAnD,GAAc0C,EAAMjD,EAAQC,GAAUgD,EAAM,GAAKzC,EACjDR,GAAS,GACTC,GAAU,GAEVD,EAAQL,KAAKC,IAAI,EAAKI,GACtBC,EAASN,KAAKC,IAAI,EAAKK,EAC3B,CAEA,QAAoBlG,IAAhBwI,EAEA,KAER,CACIE,GAA4BA,EAAyBzE,OAAS,EAC9DmE,EAAKO,oBAAsB,IAAkCoC,oCAAoC,CAC7FC,KAAM1F,EAvmBJ,GAwmBF2F,MAAOvC,EAAyB,GAChCwC,KAAMxC,EAAyB,GAC/ByC,GAAIzC,EAAyB,GAC7B0C,KAAM1C,EAAyB,GAC/B2C,MAAO3C,EAAyB,GAChC4C,KAAM5C,EAAyB,GAC/BlH,OAAQ,EACRyI,KAAM,EACNsB,YAAY,IAGhBnD,EAAKO,yBAAsB3I,CAEnC,EAtiBc,EAAAmH,wBAAyB,C,uFC/I3C,MAAMqE,EAMF,YAAmBC,EAAcC,EAA6BC,EAA4BC,GACtFhM,KAAK6L,KAAOA,EACZ7L,KAAK8L,mBAAqBA,EAC1B9L,KAAK+L,kBAAoBA,EACzB/L,KAAKgM,kBAAoBA,CAC7B,EAOG,MAAMC,EAsBF,iDAAOC,CAA2CpL,GACrD,IAAKA,EAAQwB,OAET,OAAO,KAGXxB,EAAQqL,YAAYC,YAAYC,mBAEhC,MAAMjB,EAAOtK,EAAQwL,UAAUjG,MACzBkG,EAAezL,EAAQ0L,WAAW,OAAGpM,OAAWA,GAAW,GAC3DqM,EAAc3L,EAAQ0L,WAAW,OAAGpM,OAAWA,GAAW,GAEhE,IAAIsM,EACAC,EACA7L,EAAQ8L,gBACRF,EAAY5L,EAAQ0L,WAAW,OAAGpM,OAAWA,GAAW,GACxDuM,EAAc7L,EAAQ0L,WAAW,OAAGpM,OAAWA,GAAW,KAE1DsM,EAAY5L,EAAQ0L,WAAW,OAAGpM,OAAWA,GAAW,GACxDuM,EAAc7L,EAAQ0L,WAAW,OAAGpM,OAAWA,GAAW,IAG9D,MAAMyM,EAAe/L,EAAQ0L,WAAW,OAAGpM,OAAWA,GAAW,GAC3D0M,EAAchM,EAAQ0L,WAAW,OAAGpM,OAAWA,GAAW,GAE1DuL,EAAa7K,EAAQ6K,WAG3B,IAAItB,EAAO,EAKX,OAJ2B,GAAvBvJ,EAAQsF,aAA2C,GAA5B,EAAU,cACjCiE,EAAO,GAGJ,IAAI0C,SAASC,IAChBD,QAAQE,IAAI,CAACR,EAAaF,EAAcG,EAAWC,EAAaE,EAAcC,IAAc7I,MAAK,EAAEqH,EAAMD,EAAOE,EAAIC,EAAMC,EAAOC,MAC7H,MAAMwB,EAAwB,CAC1B9B,OACAC,QACAC,OACAC,KACAC,OACAC,QACAC,OACA9J,OAhBG,EAiBHyI,OACAsB,cAGJqB,EAAQhN,KAAKmL,oCAAoC+B,GAAU,GAC7D,GAEV,CASQ,mBAAOC,CAAa9F,EAAWD,GACnC,OAAOpB,KAAKoH,MAAM/F,EAAID,EAAGpB,KAAKqH,KAAKhG,EAAIA,EAAID,EAAIA,EAAI,GACvD,CASO,0CAAO+D,CAAoC+B,GAC9C,MAAMI,EAAqB,IAAI,IAC/B,IAAIC,EAAkB,EAGtB,MAAMC,EAAK,EAAMN,EAAS9B,KACpBqC,EAAKD,EAELE,EAAY,GAAMF,EAGlBG,EAAQD,EAAY,EAE1B,IAAK,IAAIE,EAAY,EAAGA,EAAY,EAAGA,IAAa,CAChD,MAAMC,EAAW7N,KAAK8N,WAAWF,GAC3BG,EAAkBb,EAAUW,EAAShC,MAC3C,IAAImC,EAAIL,EAKR,MAAMM,EAA6B,IAApBf,EAAStL,OAAW,IACnC,IAAK,IAAIwF,EAAI,EAAGA,EAAI8F,EAAS9B,KAAMhE,IAAK,CACpC,IAAI8G,EAAIP,EAER,IAAK,IAAItG,EAAI,EAAGA,EAAI6F,EAAS9B,KAAM/D,IAAK,CAEpC,MAAM8G,EAAiBN,EAAS9B,kBAAkBqC,MAAMF,GAAGG,IAAIR,EAAS7B,kBAAkBoC,MAAMJ,IAAIK,IAAIR,EAAS/B,oBACjHqC,EAAeG,YAEf,MAAMC,EACFvO,KAAKmN,aAAae,EAAIR,EAAWM,EAAIN,GACrC1N,KAAKmN,aAAae,EAAIR,EAAWM,EAAIN,GACrC1N,KAAKmN,aAAae,EAAIR,EAAWM,EAAIN,GACrC1N,KAAKmN,aAAae,EAAIR,EAAWM,EAAIN,GAEzC,IAAIc,EAAIT,EAAU3G,EAAI8F,EAAS9B,KAAO6C,EAAS5G,EAAI4G,EAAS,GACxDQ,EAAIV,EAAU3G,EAAI8F,EAAS9B,KAAO6C,EAAS5G,EAAI4G,EAAS,GACxDS,EAAIX,EAAU3G,EAAI8F,EAAS9B,KAAO6C,EAAS5G,EAAI4G,EAAS,GAGxDU,MAAMH,KACNA,EAAI,GAEJG,MAAMF,KACNA,EAAI,GAEJE,MAAMD,KACNA,EAAI,GAIc,IAAlBxB,EAAS7C,OACTmE,GAAK,IACLC,GAAK,IACLC,GAAK,KAILxB,EAASvB,aACT6C,EAAIxI,KAAK4I,KAAI,QAAMJ,GAAI,MACvBC,EAAIzI,KAAK4I,KAAI,QAAMH,GAAI,MACvBC,EAAI1I,KAAK4I,KAAI,QAAMF,GAAI,OAK3B,MAAMzI,EAAMjG,KAAK6O,eACjB,GAAI7O,KAAK8O,wBAAyB,CAC9B,MAAMC,EAAa/I,KAAKC,IAAIuI,EAAGC,EAAGC,GAClC,GAAIK,EAAa9I,EAAK,CAClB,MAAM+I,EAAS/I,EAAM8I,EACrBP,GAAKQ,EACLP,GAAKO,EACLN,GAAKM,CACT,CACJ,MACIR,GAAI,QAAMA,EAAG,EAAGvI,GAChBwI,GAAI,QAAMA,EAAG,EAAGxI,GAChByI,GAAI,QAAMA,EAAG,EAAGzI,GAGpB,MAAMgJ,EAAQ,IAAI,KAAOT,EAAGC,EAAGC,GAE/BpB,EAAmB4B,SAASf,EAAgBc,EAAOV,GAEnDhB,GAAmBgB,EAEnBL,GAAKV,CACT,CAEAQ,GAAKP,CACT,CACJ,CAGA,MAUM0B,EAVmB,EAAMnJ,KAAKoJ,GAGb,EAC0C,EAMnB7B,EAM9C,OALAD,EAAmB+B,aAAaF,GAEhC7B,EAAmBgC,sCACnBhC,EAAmBiC,wCAEZ,IAAoBC,cAAclC,EAC7C,EA7Me,EAAAQ,WAAoC,CAC/C,IAAIlC,EAAoB,QAAS,IAAI,KAAQ,EAAG,EAAG,GAAI,IAAI,KAAQ,EAAG,GAAI,GAAI,IAAI,KAAQ,GAAI,EAAG,IACjG,IAAIA,EAAoB,OAAQ,IAAI,MAAS,EAAG,EAAG,GAAI,IAAI,KAAQ,EAAG,EAAG,GAAI,IAAI,KAAQ,GAAI,EAAG,IAChG,IAAIA,EAAoB,KAAM,IAAI,KAAQ,EAAG,EAAG,GAAI,IAAI,KAAQ,EAAG,EAAG,GAAI,IAAI,KAAQ,EAAG,EAAG,IAC5F,IAAIA,EAAoB,OAAQ,IAAI,KAAQ,GAAI,EAAG,GAAI,IAAI,KAAQ,EAAG,EAAG,GAAI,IAAI,KAAQ,EAAG,GAAI,IAChG,IAAIA,EAAoB,QAAS,IAAI,KAAQ,EAAG,EAAG,GAAI,IAAI,KAAQ,EAAG,EAAG,GAAI,IAAI,KAAQ,GAAI,EAAG,IAChG,IAAIA,EAAoB,OAAQ,IAAI,KAAQ,EAAG,GAAI,GAAI,IAAI,MAAS,EAAG,EAAG,GAAI,IAAI,KAAQ,GAAI,EAAG,KAIvF,EAAAiD,eAAiB,KAEjB,EAAAC,yBAA0B,C","sources":["webpack://babylonjs-typescript-webpack-template/./dev/core/src/Engines/AbstractEngine/abstractEngine.cubeTexture.ts","webpack://babylonjs-typescript-webpack-template/./dev/core/src/Misc/urlTools.ts","webpack://babylonjs-typescript-webpack-template/./dev/core/src/Misc/dds.ts","webpack://babylonjs-typescript-webpack-template/./dev/core/src/Misc/HighDynamicRange/cubemapToSphericalPolynomial.ts"],"sourcesContent":["import { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { LoadImage } from \"../../Misc/fileTools\";\r\nimport { RandomGUID } from \"../../Misc/guid\";\r\nimport type { IWebRequest } from \"../../Misc/interfaces/iWebRequest\";\r\nimport { AbstractEngine } from \"../abstractEngine\";\r\nimport { _GetCompatibleTextureLoader } from \"core/Materials/Textures/Loaders/textureLoaderManager\";\r\nimport { GetExtensionFromUrl } from \"core/Misc/urlTools\";\r\n\r\ndeclare module \"../../Engines/abstractEngine\" {\r\n    export interface AbstractEngine {\r\n        /** @internal */\r\n        createCubeTextureBase(\r\n            rootUrl: string,\r\n            scene: Nullable<Scene>,\r\n            files: Nullable<string[]>,\r\n            noMipmap: boolean,\r\n            onLoad: Nullable<(data?: any) => void>,\r\n            onError: Nullable<(message?: string, exception?: any) => void>,\r\n            format: number | undefined,\r\n            forcedExtension: any,\r\n            createPolynomials: boolean,\r\n            lodScale: number,\r\n            lodOffset: number,\r\n            fallback: Nullable<InternalTexture>,\r\n            beforeLoadCubeDataCallback: Nullable<(texture: InternalTexture, data: ArrayBufferView | ArrayBufferView[]) => void>,\r\n            imageHandler: Nullable<(texture: InternalTexture, imgs: HTMLImageElement[] | ImageBitmap[]) => void>,\r\n            useSRGBBuffer: boolean,\r\n            buffer: Nullable<ArrayBufferView>\r\n        ): InternalTexture;\r\n\r\n        /** @internal */\r\n        _partialLoadFile(\r\n            url: string,\r\n            index: number,\r\n            loadedFiles: ArrayBuffer[],\r\n            onfinish: (files: ArrayBuffer[]) => void,\r\n            onErrorCallBack: Nullable<(message?: string, exception?: any) => void>\r\n        ): void;\r\n\r\n        /** @internal */\r\n        _cascadeLoadFiles(scene: Nullable<Scene>, onfinish: (images: ArrayBuffer[]) => void, files: string[], onError: Nullable<(message?: string, exception?: any) => void>): void;\r\n\r\n        /** @internal */\r\n        _cascadeLoadImgs(\r\n            scene: Nullable<Scene>,\r\n            texture: InternalTexture,\r\n            onfinish: Nullable<(texture: InternalTexture, images: HTMLImageElement[] | ImageBitmap[]) => void>,\r\n            files: string[],\r\n            onError: Nullable<(message?: string, exception?: any) => void>,\r\n            mimeType?: string\r\n        ): void;\r\n\r\n        /** @internal */\r\n        _partialLoadImg(\r\n            url: string,\r\n            index: number,\r\n            loadedImages: HTMLImageElement[] | ImageBitmap[],\r\n            scene: Nullable<Scene>,\r\n            texture: InternalTexture,\r\n            onfinish: Nullable<(texture: InternalTexture, images: HTMLImageElement[] | ImageBitmap[]) => void>,\r\n            onErrorCallBack: Nullable<(message?: string, exception?: any) => void>,\r\n            mimeType?: string\r\n        ): void;\r\n    }\r\n}\r\n\r\nAbstractEngine.prototype._partialLoadFile = function (\r\n    url: string,\r\n    index: number,\r\n    loadedFiles: ArrayBuffer[],\r\n    onfinish: (files: ArrayBuffer[]) => void,\r\n    onErrorCallBack: Nullable<(message?: string, exception?: any) => void> = null\r\n): void {\r\n    const onload = (data: ArrayBuffer) => {\r\n        loadedFiles[index] = data;\r\n        (<any>loadedFiles)._internalCount++;\r\n\r\n        if ((<any>loadedFiles)._internalCount === 6) {\r\n            onfinish(loadedFiles);\r\n        }\r\n    };\r\n\r\n    const onerror = (request?: IWebRequest, exception?: any) => {\r\n        if (onErrorCallBack && request) {\r\n            onErrorCallBack(request.status + \" \" + request.statusText, exception);\r\n        }\r\n    };\r\n\r\n    this._loadFile(url, onload as (data: string | ArrayBuffer) => void, undefined, undefined, true, onerror);\r\n};\r\n\r\nAbstractEngine.prototype._cascadeLoadFiles = function (\r\n    scene: Nullable<Scene>,\r\n    onfinish: (images: ArrayBuffer[]) => void,\r\n    files: string[],\r\n    onError: Nullable<(message?: string, exception?: any) => void> = null\r\n): void {\r\n    const loadedFiles: ArrayBuffer[] = [];\r\n    (<any>loadedFiles)._internalCount = 0;\r\n\r\n    for (let index = 0; index < 6; index++) {\r\n        this._partialLoadFile(files[index], index, loadedFiles, onfinish, onError);\r\n    }\r\n};\r\n\r\nAbstractEngine.prototype._cascadeLoadImgs = function (\r\n    scene: Nullable<Scene>,\r\n    texture: InternalTexture,\r\n    onfinish: Nullable<(texture: InternalTexture, images: HTMLImageElement[] | ImageBitmap[]) => void>,\r\n    files: string[],\r\n    onError: Nullable<(message?: string, exception?: any) => void> = null,\r\n    mimeType?: string\r\n) {\r\n    const loadedImages: HTMLImageElement[] | ImageBitmap[] = [];\r\n    (<any>loadedImages)._internalCount = 0;\r\n\r\n    for (let index = 0; index < 6; index++) {\r\n        this._partialLoadImg(files[index], index, loadedImages, scene, texture, onfinish, onError, mimeType);\r\n    }\r\n};\r\n\r\nAbstractEngine.prototype._partialLoadImg = function (\r\n    url: string,\r\n    index: number,\r\n    loadedImages: HTMLImageElement[] | ImageBitmap[],\r\n    scene: Nullable<Scene>,\r\n    texture: InternalTexture,\r\n    onfinish: Nullable<(texture: InternalTexture, images: HTMLImageElement[] | ImageBitmap[]) => void>,\r\n    onErrorCallBack: Nullable<(message?: string, exception?: any) => void> = null,\r\n    mimeType?: string\r\n) {\r\n    const tokenPendingData = RandomGUID();\r\n\r\n    const onload = (img: HTMLImageElement | ImageBitmap) => {\r\n        loadedImages[index] = img;\r\n        (<any>loadedImages)._internalCount++;\r\n\r\n        if (scene) {\r\n            scene.removePendingData(tokenPendingData);\r\n        }\r\n\r\n        if ((<any>loadedImages)._internalCount === 6 && onfinish) {\r\n            onfinish(texture, loadedImages);\r\n        }\r\n    };\r\n\r\n    const onerror = (message?: string, exception?: any) => {\r\n        if (scene) {\r\n            scene.removePendingData(tokenPendingData);\r\n        }\r\n\r\n        if (onErrorCallBack) {\r\n            onErrorCallBack(message, exception);\r\n        }\r\n    };\r\n\r\n    LoadImage(url, onload, onerror, scene ? scene.offlineProvider : null, mimeType);\r\n    if (scene) {\r\n        scene.addPendingData(tokenPendingData);\r\n    }\r\n};\r\n\r\nAbstractEngine.prototype.createCubeTextureBase = function (\r\n    rootUrl: string,\r\n    scene: Nullable<Scene>,\r\n    files: Nullable<string[]>,\r\n    noMipmap?: boolean,\r\n    onLoad: Nullable<(data?: any) => void> = null,\r\n    onError: Nullable<(message?: string, exception?: any) => void> = null,\r\n    format?: number,\r\n    forcedExtension: any = null,\r\n    createPolynomials: boolean = false,\r\n    lodScale: number = 0,\r\n    lodOffset: number = 0,\r\n    fallback: Nullable<InternalTexture> = null,\r\n    beforeLoadCubeDataCallback: Nullable<(texture: InternalTexture, data: ArrayBufferView | ArrayBufferView[]) => void> = null,\r\n    imageHandler: Nullable<(texture: InternalTexture, imgs: HTMLImageElement[] | ImageBitmap[]) => void> = null,\r\n    useSRGBBuffer = false,\r\n    buffer: Nullable<ArrayBufferView> = null\r\n): InternalTexture {\r\n    const texture = fallback ? fallback : new InternalTexture(this, InternalTextureSource.Cube);\r\n    texture.isCube = true;\r\n    texture.url = rootUrl;\r\n    texture.generateMipMaps = !noMipmap;\r\n    texture._lodGenerationScale = lodScale;\r\n    texture._lodGenerationOffset = lodOffset;\r\n    texture._useSRGBBuffer = !!useSRGBBuffer && this._caps.supportSRGBBuffers && (this.version > 1 || this.isWebGPU || !!noMipmap);\r\n    if (texture !== fallback) {\r\n        texture.label = rootUrl.substring(0, 60); // default label, can be overriden by the caller\r\n    }\r\n\r\n    if (!this._doNotHandleContextLost) {\r\n        texture._extension = forcedExtension;\r\n        texture._files = files;\r\n        texture._buffer = buffer;\r\n    }\r\n\r\n    const originalRootUrl = rootUrl;\r\n    if (this._transformTextureUrl && !fallback) {\r\n        rootUrl = this._transformTextureUrl(rootUrl);\r\n    }\r\n\r\n    const extension = forcedExtension ?? GetExtensionFromUrl(rootUrl);\r\n\r\n    const loaderPromise = _GetCompatibleTextureLoader(extension);\r\n\r\n    const onInternalError = (request?: IWebRequest, exception?: any) => {\r\n        if (rootUrl === originalRootUrl) {\r\n            if (onError && request) {\r\n                onError(request.status + \" \" + request.statusText, exception);\r\n            }\r\n        } else {\r\n            // fall back to the original url if the transformed url fails to load\r\n            Logger.Warn(`Failed to load ${rootUrl}, falling back to the ${originalRootUrl}`);\r\n            this.createCubeTextureBase(\r\n                originalRootUrl,\r\n                scene,\r\n                files,\r\n                !!noMipmap,\r\n                onLoad,\r\n                onError,\r\n                format,\r\n                forcedExtension,\r\n                createPolynomials,\r\n                lodScale,\r\n                lodOffset,\r\n                texture,\r\n                beforeLoadCubeDataCallback,\r\n                imageHandler,\r\n                useSRGBBuffer,\r\n                buffer\r\n            );\r\n        }\r\n    };\r\n\r\n    if (loaderPromise) {\r\n        loaderPromise.then((loader) => {\r\n            const onloaddata = (data: ArrayBufferView | ArrayBufferView[]) => {\r\n                if (beforeLoadCubeDataCallback) {\r\n                    beforeLoadCubeDataCallback(texture, data);\r\n                }\r\n                loader.loadCubeData(data, texture, createPolynomials, onLoad, onError);\r\n            };\r\n            if (buffer) {\r\n                onloaddata(buffer);\r\n            } else if (files && files.length === 6) {\r\n                if (loader.supportCascades) {\r\n                    this._cascadeLoadFiles(scene, (images) => onloaddata(images.map((image) => new Uint8Array(image))), files, onError);\r\n                } else {\r\n                    if (onError) {\r\n                        onError(\"Textures type does not support cascades.\");\r\n                    } else {\r\n                        Logger.Warn(\"Texture loader does not support cascades.\");\r\n                    }\r\n                }\r\n            } else {\r\n                this._loadFile(rootUrl, (data) => onloaddata(new Uint8Array(data as ArrayBuffer)), undefined, undefined, true, onInternalError);\r\n            }\r\n        });\r\n    } else {\r\n        if (!files || files.length === 0) {\r\n            throw new Error(\"Cannot load cubemap because files were not defined, or the correct loader was not found.\");\r\n        }\r\n\r\n        this._cascadeLoadImgs(\r\n            scene,\r\n            texture,\r\n            (texture: InternalTexture, imgs: HTMLImageElement[] | ImageBitmap[]) => {\r\n                if (imageHandler) {\r\n                    imageHandler(texture, imgs);\r\n                }\r\n            },\r\n            files,\r\n            onError\r\n        );\r\n    }\r\n\r\n    this._internalTexturesCache.push(texture);\r\n\r\n    return texture;\r\n};\r\n","/**\r\n * Gets the file extension from a URL.\r\n * @param url The URL to get the file extension from.\r\n * @returns The file extension, or an empty string if no extension is found.\r\n */\r\nexport function GetExtensionFromUrl(url: string) {\r\n    const urlWithoutUriParams = url.split(\"?\")[0];\r\n    const lastDot = urlWithoutUriParams.lastIndexOf(\".\");\r\n    const extension = lastDot > -1 ? urlWithoutUriParams.substring(lastDot).toLowerCase() : \"\";\r\n    return extension;\r\n}\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { Clamp } from \"../Maths/math.scalar.functions\";\r\nimport type { SphericalPolynomial } from \"../Maths/sphericalPolynomial\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { CubeMapToSphericalPolynomialTools } from \"../Misc/HighDynamicRange/cubemapToSphericalPolynomial\";\r\nimport type { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport { FromHalfFloat, ToHalfFloat } from \"./textureTools\";\r\n\r\nimport \"../Engines/AbstractEngine/abstractEngine.cubeTexture\";\r\n\r\n// Based on demo done by Brandon Jones - http://media.tojicode.com/webgl-samples/dds.html\r\n// All values and structures referenced from:\r\n// http://msdn.microsoft.com/en-us/library/bb943991.aspx/\r\nconst DDS_MAGIC = 0x20534444;\r\n\r\nconst //DDSD_CAPS = 0x1,\r\n    //DDSD_HEIGHT = 0x2,\r\n    //DDSD_WIDTH = 0x4,\r\n    //DDSD_PITCH = 0x8,\r\n    //DDSD_PIXELFORMAT = 0x1000,\r\n    DDSD_MIPMAPCOUNT = 0x20000;\r\n//DDSD_LINEARSIZE = 0x80000,\r\n//DDSD_DEPTH = 0x800000;\r\n\r\n// var DDSCAPS_COMPLEX = 0x8,\r\n//     DDSCAPS_MIPMAP = 0x400000,\r\n//     DDSCAPS_TEXTURE = 0x1000;\r\n\r\nconst DDSCAPS2_CUBEMAP = 0x200;\r\n// DDSCAPS2_CUBEMAP_POSITIVEX = 0x400,\r\n// DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800,\r\n// DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000,\r\n// DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000,\r\n// DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000,\r\n// DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000,\r\n// DDSCAPS2_VOLUME = 0x200000;\r\n\r\nconst //DDPF_ALPHAPIXELS = 0x1,\r\n    //DDPF_ALPHA = 0x2,\r\n    DDPF_FOURCC = 0x4,\r\n    DDPF_RGB = 0x40,\r\n    //DDPF_YUV = 0x200,\r\n    DDPF_LUMINANCE = 0x20000;\r\n\r\nfunction FourCCToInt32(value: string) {\r\n    return value.charCodeAt(0) + (value.charCodeAt(1) << 8) + (value.charCodeAt(2) << 16) + (value.charCodeAt(3) << 24);\r\n}\r\n\r\nfunction Int32ToFourCC(value: number) {\r\n    return String.fromCharCode(value & 0xff, (value >> 8) & 0xff, (value >> 16) & 0xff, (value >> 24) & 0xff);\r\n}\r\n\r\nconst FOURCC_DXT1 = FourCCToInt32(\"DXT1\");\r\nconst FOURCC_DXT3 = FourCCToInt32(\"DXT3\");\r\nconst FOURCC_DXT5 = FourCCToInt32(\"DXT5\");\r\nconst FOURCC_DX10 = FourCCToInt32(\"DX10\");\r\nconst FOURCC_D3DFMT_R16G16B16A16F = 113;\r\nconst FOURCC_D3DFMT_R32G32B32A32F = 116;\r\n\r\nconst DXGI_FORMAT_R32G32B32A32_FLOAT = 2;\r\nconst DXGI_FORMAT_R16G16B16A16_FLOAT = 10;\r\nconst DXGI_FORMAT_B8G8R8X8_UNORM = 88;\r\n\r\nconst headerLengthInt = 31; // The header length in 32 bit ints\r\n\r\n// Offsets into the header array\r\nconst off_magic = 0;\r\n\r\nconst off_size = 1;\r\nconst off_flags = 2;\r\nconst off_height = 3;\r\nconst off_width = 4;\r\n\r\nconst off_mipmapCount = 7;\r\n\r\nconst off_pfFlags = 20;\r\nconst off_pfFourCC = 21;\r\nconst off_RGBbpp = 22;\r\nconst off_RMask = 23;\r\nconst off_GMask = 24;\r\nconst off_BMask = 25;\r\nconst off_AMask = 26;\r\n// var off_caps1 = 27;\r\nconst off_caps2 = 28;\r\n// var off_caps3 = 29;\r\n// var off_caps4 = 30;\r\nconst off_dxgiFormat = 32;\r\n\r\n/**\r\n * Direct draw surface info\r\n * @see https://docs.microsoft.com/en-us/windows/desktop/direct3ddds/dx-graphics-dds-pguide\r\n */\r\nexport interface DDSInfo {\r\n    /**\r\n     * Width of the texture\r\n     */\r\n    width: number;\r\n    /**\r\n     * Width of the texture\r\n     */\r\n    height: number;\r\n    /**\r\n     * Number of Mipmaps for the texture\r\n     * @see https://en.wikipedia.org/wiki/Mipmap\r\n     */\r\n    mipmapCount: number;\r\n    /**\r\n     * If the textures format is a known fourCC format\r\n     * @see https://www.fourcc.org/\r\n     */\r\n    isFourCC: boolean;\r\n    /**\r\n     * If the texture is an RGB format eg. DXGI_FORMAT_B8G8R8X8_UNORM format\r\n     */\r\n    isRGB: boolean;\r\n    /**\r\n     * If the texture is a lumincance format\r\n     */\r\n    isLuminance: boolean;\r\n    /**\r\n     * If this is a cube texture\r\n     * @see https://docs.microsoft.com/en-us/windows/desktop/direct3ddds/dds-file-layout-for-cubic-environment-maps\r\n     */\r\n    isCube: boolean;\r\n    /**\r\n     * If the texture is a compressed format eg. FOURCC_DXT1\r\n     */\r\n    isCompressed: boolean;\r\n    /**\r\n     * The dxgiFormat of the texture\r\n     * @see https://docs.microsoft.com/en-us/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format\r\n     */\r\n    dxgiFormat: number;\r\n    /**\r\n     * Texture type eg. Engine.TEXTURETYPE_UNSIGNED_BYTE, Engine.TEXTURETYPE_FLOAT\r\n     */\r\n    textureType: number;\r\n    /**\r\n     * Sphericle polynomial created for the dds texture\r\n     */\r\n    sphericalPolynomial?: SphericalPolynomial;\r\n}\r\n\r\n/**\r\n * Class used to provide DDS decompression tools\r\n */\r\nexport class DDSTools {\r\n    /**\r\n     * Gets or sets a boolean indicating that LOD info is stored in alpha channel (false by default)\r\n     */\r\n    public static StoreLODInAlphaChannel = false;\r\n\r\n    /**\r\n     * Gets DDS information from an array buffer\r\n     * @param data defines the array buffer view to read data from\r\n     * @returns the DDS information\r\n     */\r\n    public static GetDDSInfo(data: ArrayBufferView): DDSInfo {\r\n        const header = new Int32Array(data.buffer, data.byteOffset, headerLengthInt);\r\n        const extendedHeader = new Int32Array(data.buffer, data.byteOffset, headerLengthInt + 4);\r\n\r\n        let mipmapCount = 1;\r\n        if (header[off_flags] & DDSD_MIPMAPCOUNT) {\r\n            mipmapCount = Math.max(1, header[off_mipmapCount]);\r\n        }\r\n\r\n        const fourCC = header[off_pfFourCC];\r\n        const dxgiFormat = fourCC === FOURCC_DX10 ? extendedHeader[off_dxgiFormat] : 0;\r\n        let textureType = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n\r\n        switch (fourCC) {\r\n            case FOURCC_D3DFMT_R16G16B16A16F:\r\n                textureType = Constants.TEXTURETYPE_HALF_FLOAT;\r\n                break;\r\n            case FOURCC_D3DFMT_R32G32B32A32F:\r\n                textureType = Constants.TEXTURETYPE_FLOAT;\r\n                break;\r\n            case FOURCC_DX10:\r\n                if (dxgiFormat === DXGI_FORMAT_R16G16B16A16_FLOAT) {\r\n                    textureType = Constants.TEXTURETYPE_HALF_FLOAT;\r\n                    break;\r\n                }\r\n                if (dxgiFormat === DXGI_FORMAT_R32G32B32A32_FLOAT) {\r\n                    textureType = Constants.TEXTURETYPE_FLOAT;\r\n                    break;\r\n                }\r\n        }\r\n\r\n        return {\r\n            width: header[off_width],\r\n            height: header[off_height],\r\n            mipmapCount: mipmapCount,\r\n            isFourCC: (header[off_pfFlags] & DDPF_FOURCC) === DDPF_FOURCC,\r\n            isRGB: (header[off_pfFlags] & DDPF_RGB) === DDPF_RGB,\r\n            isLuminance: (header[off_pfFlags] & DDPF_LUMINANCE) === DDPF_LUMINANCE,\r\n            isCube: (header[off_caps2] & DDSCAPS2_CUBEMAP) === DDSCAPS2_CUBEMAP,\r\n            isCompressed: fourCC === FOURCC_DXT1 || fourCC === FOURCC_DXT3 || fourCC === FOURCC_DXT5,\r\n            dxgiFormat: dxgiFormat,\r\n            textureType: textureType,\r\n        };\r\n    }\r\n\r\n    private static _GetHalfFloatAsFloatRGBAArrayBuffer(width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer, lod: number): Float32Array {\r\n        const destArray = new Float32Array(dataLength);\r\n        const srcData = new Uint16Array(arrayBuffer, dataOffset);\r\n        let index = 0;\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                const srcPos = (x + y * width) * 4;\r\n                destArray[index] = FromHalfFloat(srcData[srcPos]);\r\n                destArray[index + 1] = FromHalfFloat(srcData[srcPos + 1]);\r\n                destArray[index + 2] = FromHalfFloat(srcData[srcPos + 2]);\r\n                if (DDSTools.StoreLODInAlphaChannel) {\r\n                    destArray[index + 3] = lod;\r\n                } else {\r\n                    destArray[index + 3] = FromHalfFloat(srcData[srcPos + 3]);\r\n                }\r\n                index += 4;\r\n            }\r\n        }\r\n\r\n        return destArray;\r\n    }\r\n\r\n    private static _GetHalfFloatRGBAArrayBuffer(width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer, lod: number): Uint16Array {\r\n        if (DDSTools.StoreLODInAlphaChannel) {\r\n            const destArray = new Uint16Array(dataLength);\r\n            const srcData = new Uint16Array(arrayBuffer, dataOffset);\r\n            let index = 0;\r\n            for (let y = 0; y < height; y++) {\r\n                for (let x = 0; x < width; x++) {\r\n                    const srcPos = (x + y * width) * 4;\r\n                    destArray[index] = srcData[srcPos];\r\n                    destArray[index + 1] = srcData[srcPos + 1];\r\n                    destArray[index + 2] = srcData[srcPos + 2];\r\n                    destArray[index + 3] = ToHalfFloat(lod);\r\n                    index += 4;\r\n                }\r\n            }\r\n\r\n            return destArray;\r\n        }\r\n\r\n        return new Uint16Array(arrayBuffer, dataOffset, dataLength);\r\n    }\r\n\r\n    private static _GetFloatRGBAArrayBuffer(width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer, lod: number): Float32Array {\r\n        if (DDSTools.StoreLODInAlphaChannel) {\r\n            const destArray = new Float32Array(dataLength);\r\n            const srcData = new Float32Array(arrayBuffer, dataOffset);\r\n            let index = 0;\r\n            for (let y = 0; y < height; y++) {\r\n                for (let x = 0; x < width; x++) {\r\n                    const srcPos = (x + y * width) * 4;\r\n                    destArray[index] = srcData[srcPos];\r\n                    destArray[index + 1] = srcData[srcPos + 1];\r\n                    destArray[index + 2] = srcData[srcPos + 2];\r\n                    destArray[index + 3] = lod;\r\n                    index += 4;\r\n                }\r\n            }\r\n\r\n            return destArray;\r\n        }\r\n        return new Float32Array(arrayBuffer, dataOffset, dataLength);\r\n    }\r\n\r\n    private static _GetFloatAsHalfFloatRGBAArrayBuffer(width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer, lod: number): Uint16Array {\r\n        const destArray = new Uint16Array(dataLength);\r\n        const srcData = new Float32Array(arrayBuffer, dataOffset);\r\n        let index = 0;\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                destArray[index] = ToHalfFloat(srcData[index]);\r\n                destArray[index + 1] = ToHalfFloat(srcData[index + 1]);\r\n                destArray[index + 2] = ToHalfFloat(srcData[index + 2]);\r\n                if (DDSTools.StoreLODInAlphaChannel) {\r\n                    destArray[index + 3] = ToHalfFloat(lod);\r\n                } else {\r\n                    destArray[index + 3] = ToHalfFloat(srcData[index + 3]);\r\n                }\r\n                index += 4;\r\n            }\r\n        }\r\n\r\n        return destArray;\r\n    }\r\n\r\n    private static _GetFloatAsUIntRGBAArrayBuffer(width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer, lod: number): Uint8Array {\r\n        const destArray = new Uint8Array(dataLength);\r\n        const srcData = new Float32Array(arrayBuffer, dataOffset);\r\n        let index = 0;\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                const srcPos = (x + y * width) * 4;\r\n                destArray[index] = Clamp(srcData[srcPos]) * 255;\r\n                destArray[index + 1] = Clamp(srcData[srcPos + 1]) * 255;\r\n                destArray[index + 2] = Clamp(srcData[srcPos + 2]) * 255;\r\n                if (DDSTools.StoreLODInAlphaChannel) {\r\n                    destArray[index + 3] = lod;\r\n                } else {\r\n                    destArray[index + 3] = Clamp(srcData[srcPos + 3]) * 255;\r\n                }\r\n                index += 4;\r\n            }\r\n        }\r\n\r\n        return destArray;\r\n    }\r\n\r\n    private static _GetHalfFloatAsUIntRGBAArrayBuffer(width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer, lod: number): Uint8Array {\r\n        const destArray = new Uint8Array(dataLength);\r\n        const srcData = new Uint16Array(arrayBuffer, dataOffset);\r\n        let index = 0;\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                const srcPos = (x + y * width) * 4;\r\n                destArray[index] = Clamp(FromHalfFloat(srcData[srcPos])) * 255;\r\n                destArray[index + 1] = Clamp(FromHalfFloat(srcData[srcPos + 1])) * 255;\r\n                destArray[index + 2] = Clamp(FromHalfFloat(srcData[srcPos + 2])) * 255;\r\n                if (DDSTools.StoreLODInAlphaChannel) {\r\n                    destArray[index + 3] = lod;\r\n                } else {\r\n                    destArray[index + 3] = Clamp(FromHalfFloat(srcData[srcPos + 3])) * 255;\r\n                }\r\n                index += 4;\r\n            }\r\n        }\r\n\r\n        return destArray;\r\n    }\r\n\r\n    private static _GetRGBAArrayBuffer(\r\n        width: number,\r\n        height: number,\r\n        dataOffset: number,\r\n        dataLength: number,\r\n        arrayBuffer: ArrayBuffer,\r\n        rOffset: number,\r\n        gOffset: number,\r\n        bOffset: number,\r\n        aOffset: number\r\n    ): Uint8Array {\r\n        const byteArray = new Uint8Array(dataLength);\r\n        const srcData = new Uint8Array(arrayBuffer, dataOffset);\r\n        let index = 0;\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                const srcPos = (x + y * width) * 4;\r\n\r\n                byteArray[index] = srcData[srcPos + rOffset];\r\n                byteArray[index + 1] = srcData[srcPos + gOffset];\r\n                byteArray[index + 2] = srcData[srcPos + bOffset];\r\n                byteArray[index + 3] = srcData[srcPos + aOffset];\r\n                index += 4;\r\n            }\r\n        }\r\n\r\n        return byteArray;\r\n    }\r\n\r\n    private static _ExtractLongWordOrder(value: number): number {\r\n        if (value === 0 || value === 255 || value === -16777216) {\r\n            return 0;\r\n        }\r\n\r\n        return 1 + DDSTools._ExtractLongWordOrder(value >> 8);\r\n    }\r\n\r\n    private static _GetRGBArrayBuffer(\r\n        width: number,\r\n        height: number,\r\n        dataOffset: number,\r\n        dataLength: number,\r\n        arrayBuffer: ArrayBuffer,\r\n        rOffset: number,\r\n        gOffset: number,\r\n        bOffset: number\r\n    ): Uint8Array {\r\n        const byteArray = new Uint8Array(dataLength);\r\n        const srcData = new Uint8Array(arrayBuffer, dataOffset);\r\n        let index = 0;\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                const srcPos = (x + y * width) * 3;\r\n\r\n                byteArray[index] = srcData[srcPos + rOffset];\r\n                byteArray[index + 1] = srcData[srcPos + gOffset];\r\n                byteArray[index + 2] = srcData[srcPos + bOffset];\r\n                index += 3;\r\n            }\r\n        }\r\n\r\n        return byteArray;\r\n    }\r\n\r\n    private static _GetLuminanceArrayBuffer(width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer): Uint8Array {\r\n        const byteArray = new Uint8Array(dataLength);\r\n        const srcData = new Uint8Array(arrayBuffer, dataOffset);\r\n        let index = 0;\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                const srcPos = x + y * width;\r\n                byteArray[index] = srcData[srcPos];\r\n                index++;\r\n            }\r\n        }\r\n\r\n        return byteArray;\r\n    }\r\n\r\n    /**\r\n     * Uploads DDS Levels to a Babylon Texture\r\n     * @internal\r\n     */\r\n    public static UploadDDSLevels(\r\n        engine: AbstractEngine,\r\n        texture: InternalTexture,\r\n        data: ArrayBufferView,\r\n        info: DDSInfo,\r\n        loadMipmaps: boolean,\r\n        faces: number,\r\n        lodIndex = -1,\r\n        currentFace?: number,\r\n        destTypeMustBeFilterable = true\r\n    ) {\r\n        let sphericalPolynomialFaces: Nullable<Array<ArrayBufferView>> = null;\r\n        if (info.sphericalPolynomial) {\r\n            sphericalPolynomialFaces = [] as ArrayBufferView[];\r\n        }\r\n        const ext = !!engine.getCaps().s3tc;\r\n\r\n        // TODO WEBGPU Once generateMipMaps is split into generateMipMaps + hasMipMaps in InternalTexture this line can be removed\r\n        texture.generateMipMaps = loadMipmaps;\r\n\r\n        const header = new Int32Array(data.buffer, data.byteOffset, headerLengthInt);\r\n        let fourCC: number,\r\n            width: number,\r\n            height: number,\r\n            dataLength: number = 0,\r\n            dataOffset: number;\r\n        let byteArray: Uint8Array, mipmapCount: number, mip: number;\r\n        let internalCompressedFormat = 0;\r\n        let blockBytes = 1;\r\n\r\n        if (header[off_magic] !== DDS_MAGIC) {\r\n            Logger.Error(\"Invalid magic number in DDS header\");\r\n            return;\r\n        }\r\n\r\n        if (!info.isFourCC && !info.isRGB && !info.isLuminance) {\r\n            Logger.Error(\"Unsupported format, must contain a FourCC, RGB or LUMINANCE code\");\r\n            return;\r\n        }\r\n\r\n        if (info.isCompressed && !ext) {\r\n            Logger.Error(\"Compressed textures are not supported on this platform.\");\r\n            return;\r\n        }\r\n\r\n        let bpp = header[off_RGBbpp];\r\n        dataOffset = header[off_size] + 4;\r\n\r\n        let computeFormats = false;\r\n\r\n        if (info.isFourCC) {\r\n            fourCC = header[off_pfFourCC];\r\n            switch (fourCC) {\r\n                case FOURCC_DXT1:\r\n                    blockBytes = 8;\r\n                    internalCompressedFormat = Constants.TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT1;\r\n                    break;\r\n                case FOURCC_DXT3:\r\n                    blockBytes = 16;\r\n                    internalCompressedFormat = Constants.TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT3;\r\n                    break;\r\n                case FOURCC_DXT5:\r\n                    blockBytes = 16;\r\n                    internalCompressedFormat = Constants.TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT5;\r\n                    break;\r\n                case FOURCC_D3DFMT_R16G16B16A16F:\r\n                    computeFormats = true;\r\n                    bpp = 64;\r\n                    break;\r\n                case FOURCC_D3DFMT_R32G32B32A32F:\r\n                    computeFormats = true;\r\n                    bpp = 128;\r\n                    break;\r\n                case FOURCC_DX10: {\r\n                    // There is an additionnal header so dataOffset need to be changed\r\n                    dataOffset += 5 * 4; // 5 uints\r\n\r\n                    let supported = false;\r\n                    switch (info.dxgiFormat) {\r\n                        case DXGI_FORMAT_R16G16B16A16_FLOAT:\r\n                            computeFormats = true;\r\n                            bpp = 64;\r\n                            supported = true;\r\n                            break;\r\n                        case DXGI_FORMAT_R32G32B32A32_FLOAT:\r\n                            computeFormats = true;\r\n                            bpp = 128;\r\n                            supported = true;\r\n                            break;\r\n                        case DXGI_FORMAT_B8G8R8X8_UNORM:\r\n                            info.isRGB = true;\r\n                            info.isFourCC = false;\r\n                            bpp = 32;\r\n                            supported = true;\r\n                            break;\r\n                    }\r\n\r\n                    if (supported) {\r\n                        break;\r\n                    }\r\n                }\r\n                // eslint-disable-next-line no-fallthrough\r\n                default:\r\n                    Logger.Error([\"Unsupported FourCC code:\", Int32ToFourCC(fourCC)]);\r\n                    return;\r\n            }\r\n        }\r\n\r\n        const rOffset = DDSTools._ExtractLongWordOrder(header[off_RMask]);\r\n        const gOffset = DDSTools._ExtractLongWordOrder(header[off_GMask]);\r\n        const bOffset = DDSTools._ExtractLongWordOrder(header[off_BMask]);\r\n        const aOffset = DDSTools._ExtractLongWordOrder(header[off_AMask]);\r\n\r\n        if (computeFormats) {\r\n            internalCompressedFormat = engine._getRGBABufferInternalSizedFormat(info.textureType);\r\n        }\r\n\r\n        mipmapCount = 1;\r\n        if (header[off_flags] & DDSD_MIPMAPCOUNT && loadMipmaps !== false) {\r\n            mipmapCount = Math.max(1, header[off_mipmapCount]);\r\n        }\r\n\r\n        const startFace = currentFace || 0;\r\n        const caps = engine.getCaps();\r\n        for (let face = startFace; face < faces; face++) {\r\n            width = header[off_width];\r\n            height = header[off_height];\r\n\r\n            for (mip = 0; mip < mipmapCount; ++mip) {\r\n                if (lodIndex === -1 || lodIndex === mip) {\r\n                    // In case of fixed LOD, if the lod has just been uploaded, early exit.\r\n                    const i = lodIndex === -1 ? mip : 0;\r\n\r\n                    if (!info.isCompressed && info.isFourCC) {\r\n                        texture.format = Constants.TEXTUREFORMAT_RGBA;\r\n                        dataLength = width * height * 4;\r\n                        let floatArray: Nullable<ArrayBufferView> = null;\r\n\r\n                        if (engine._badOS || engine._badDesktopOS || (!caps.textureHalfFloat && !caps.textureFloat)) {\r\n                            // Required because iOS has many issues with float and half float generation\r\n                            if (bpp === 128) {\r\n                                floatArray = DDSTools._GetFloatAsUIntRGBAArrayBuffer(width, height, data.byteOffset + dataOffset, dataLength, data.buffer, i);\r\n                                if (sphericalPolynomialFaces && i == 0) {\r\n                                    sphericalPolynomialFaces.push(DDSTools._GetFloatRGBAArrayBuffer(width, height, data.byteOffset + dataOffset, dataLength, data.buffer, i));\r\n                                }\r\n                            } else if (bpp === 64) {\r\n                                floatArray = DDSTools._GetHalfFloatAsUIntRGBAArrayBuffer(width, height, data.byteOffset + dataOffset, dataLength, data.buffer, i);\r\n                                if (sphericalPolynomialFaces && i == 0) {\r\n                                    sphericalPolynomialFaces.push(\r\n                                        DDSTools._GetHalfFloatAsFloatRGBAArrayBuffer(width, height, data.byteOffset + dataOffset, dataLength, data.buffer, i)\r\n                                    );\r\n                                }\r\n                            }\r\n\r\n                            texture.type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n                        } else {\r\n                            const floatAvailable = caps.textureFloat && ((destTypeMustBeFilterable && caps.textureFloatLinearFiltering) || !destTypeMustBeFilterable);\r\n                            const halfFloatAvailable = caps.textureHalfFloat && ((destTypeMustBeFilterable && caps.textureHalfFloatLinearFiltering) || !destTypeMustBeFilterable);\r\n\r\n                            const destType =\r\n                                (bpp === 128 || (bpp === 64 && !halfFloatAvailable)) && floatAvailable\r\n                                    ? Constants.TEXTURETYPE_FLOAT\r\n                                    : (bpp === 64 || (bpp === 128 && !floatAvailable)) && halfFloatAvailable\r\n                                      ? Constants.TEXTURETYPE_HALF_FLOAT\r\n                                      : Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n\r\n                            let dataGetter: (width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer, lod: number) => ArrayBufferView;\r\n                            let dataGetterPolynomial: Nullable<\r\n                                (width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer, lod: number) => ArrayBufferView\r\n                            > = null;\r\n\r\n                            switch (bpp) {\r\n                                case 128: {\r\n                                    switch (destType) {\r\n                                        case Constants.TEXTURETYPE_FLOAT:\r\n                                            dataGetter = DDSTools._GetFloatRGBAArrayBuffer;\r\n                                            dataGetterPolynomial = null;\r\n                                            break;\r\n                                        case Constants.TEXTURETYPE_HALF_FLOAT:\r\n                                            dataGetter = DDSTools._GetFloatAsHalfFloatRGBAArrayBuffer;\r\n                                            dataGetterPolynomial = DDSTools._GetFloatRGBAArrayBuffer;\r\n                                            break;\r\n                                        case Constants.TEXTURETYPE_UNSIGNED_BYTE:\r\n                                            dataGetter = DDSTools._GetFloatAsUIntRGBAArrayBuffer;\r\n                                            dataGetterPolynomial = DDSTools._GetFloatRGBAArrayBuffer;\r\n                                            break;\r\n                                    }\r\n                                    break;\r\n                                }\r\n                                default: {\r\n                                    // 64 bpp\r\n                                    switch (destType) {\r\n                                        case Constants.TEXTURETYPE_FLOAT:\r\n                                            dataGetter = DDSTools._GetHalfFloatAsFloatRGBAArrayBuffer;\r\n                                            dataGetterPolynomial = null;\r\n                                            break;\r\n                                        case Constants.TEXTURETYPE_HALF_FLOAT:\r\n                                            dataGetter = DDSTools._GetHalfFloatRGBAArrayBuffer;\r\n                                            dataGetterPolynomial = DDSTools._GetHalfFloatAsFloatRGBAArrayBuffer;\r\n                                            break;\r\n                                        case Constants.TEXTURETYPE_UNSIGNED_BYTE:\r\n                                            dataGetter = DDSTools._GetHalfFloatAsUIntRGBAArrayBuffer;\r\n                                            dataGetterPolynomial = DDSTools._GetHalfFloatAsFloatRGBAArrayBuffer;\r\n                                            break;\r\n                                    }\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            texture.type = destType;\r\n\r\n                            floatArray = dataGetter(width, height, data.byteOffset + dataOffset, dataLength, data.buffer, i);\r\n\r\n                            if (sphericalPolynomialFaces && i == 0) {\r\n                                sphericalPolynomialFaces.push(\r\n                                    dataGetterPolynomial ? dataGetterPolynomial(width, height, data.byteOffset + dataOffset, dataLength, data.buffer, i) : floatArray\r\n                                );\r\n                            }\r\n                        }\r\n\r\n                        if (floatArray) {\r\n                            engine._uploadDataToTextureDirectly(texture, floatArray, face, i);\r\n                        }\r\n                    } else if (info.isRGB) {\r\n                        texture.type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n                        if (bpp === 24) {\r\n                            texture.format = Constants.TEXTUREFORMAT_RGB;\r\n                            dataLength = width * height * 3;\r\n                            byteArray = DDSTools._GetRGBArrayBuffer(width, height, data.byteOffset + dataOffset, dataLength, data.buffer, rOffset, gOffset, bOffset);\r\n                            engine._uploadDataToTextureDirectly(texture, byteArray, face, i);\r\n                        } else {\r\n                            // 32\r\n                            texture.format = Constants.TEXTUREFORMAT_RGBA;\r\n                            dataLength = width * height * 4;\r\n                            byteArray = DDSTools._GetRGBAArrayBuffer(width, height, data.byteOffset + dataOffset, dataLength, data.buffer, rOffset, gOffset, bOffset, aOffset);\r\n                            engine._uploadDataToTextureDirectly(texture, byteArray, face, i);\r\n                        }\r\n                    } else if (info.isLuminance) {\r\n                        const unpackAlignment = engine._getUnpackAlignement();\r\n                        const unpaddedRowSize = width;\r\n                        const paddedRowSize = Math.floor((width + unpackAlignment - 1) / unpackAlignment) * unpackAlignment;\r\n                        dataLength = paddedRowSize * (height - 1) + unpaddedRowSize;\r\n\r\n                        byteArray = DDSTools._GetLuminanceArrayBuffer(width, height, data.byteOffset + dataOffset, dataLength, data.buffer);\r\n                        texture.format = Constants.TEXTUREFORMAT_LUMINANCE;\r\n                        texture.type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n\r\n                        engine._uploadDataToTextureDirectly(texture, byteArray, face, i);\r\n                    } else {\r\n                        dataLength = (((Math.max(4, width) / 4) * Math.max(4, height)) / 4) * blockBytes;\r\n                        byteArray = new Uint8Array(data.buffer, data.byteOffset + dataOffset, dataLength);\r\n\r\n                        texture.type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n                        engine._uploadCompressedDataToTextureDirectly(texture, internalCompressedFormat, width, height, byteArray, face, i);\r\n                    }\r\n                }\r\n                dataOffset += bpp ? width * height * (bpp / 8) : dataLength;\r\n                width *= 0.5;\r\n                height *= 0.5;\r\n\r\n                width = Math.max(1.0, width);\r\n                height = Math.max(1.0, height);\r\n            }\r\n\r\n            if (currentFace !== undefined) {\r\n                // Loading a single face\r\n                break;\r\n            }\r\n        }\r\n        if (sphericalPolynomialFaces && sphericalPolynomialFaces.length > 0) {\r\n            info.sphericalPolynomial = CubeMapToSphericalPolynomialTools.ConvertCubeMapToSphericalPolynomial({\r\n                size: header[off_width],\r\n                right: sphericalPolynomialFaces[0],\r\n                left: sphericalPolynomialFaces[1],\r\n                up: sphericalPolynomialFaces[2],\r\n                down: sphericalPolynomialFaces[3],\r\n                front: sphericalPolynomialFaces[4],\r\n                back: sphericalPolynomialFaces[5],\r\n                format: Constants.TEXTUREFORMAT_RGBA,\r\n                type: Constants.TEXTURETYPE_FLOAT,\r\n                gammaSpace: false,\r\n            });\r\n        } else {\r\n            info.sphericalPolynomial = undefined;\r\n        }\r\n    }\r\n}\r\n","import { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Clamp } from \"../../Maths/math.scalar.functions\";\r\nimport { SphericalPolynomial, SphericalHarmonics } from \"../../Maths/sphericalPolynomial\";\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport type { CubeMapInfo } from \"./panoramaToCubemap\";\r\nimport { ToLinearSpace } from \"../../Maths/math.constants\";\r\nimport { Color3 } from \"../../Maths/math.color\";\r\n\r\nclass FileFaceOrientation {\r\n    public name: string;\r\n    public worldAxisForNormal: Vector3; // the world axis corresponding to the normal to the face\r\n    public worldAxisForFileX: Vector3; // the world axis corresponding to texture right x-axis in file\r\n    public worldAxisForFileY: Vector3; // the world axis corresponding to texture down y-axis in file\r\n\r\n    public constructor(name: string, worldAxisForNormal: Vector3, worldAxisForFileX: Vector3, worldAxisForFileY: Vector3) {\r\n        this.name = name;\r\n        this.worldAxisForNormal = worldAxisForNormal;\r\n        this.worldAxisForFileX = worldAxisForFileX;\r\n        this.worldAxisForFileY = worldAxisForFileY;\r\n    }\r\n}\r\n\r\n/**\r\n * Helper class dealing with the extraction of spherical polynomial dataArray\r\n * from a cube map.\r\n */\r\nexport class CubeMapToSphericalPolynomialTools {\r\n    private static _FileFaces: FileFaceOrientation[] = [\r\n        new FileFaceOrientation(\"right\", new Vector3(1, 0, 0), new Vector3(0, 0, -1), new Vector3(0, -1, 0)), // +X east\r\n        new FileFaceOrientation(\"left\", new Vector3(-1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, -1, 0)), // -X west\r\n        new FileFaceOrientation(\"up\", new Vector3(0, 1, 0), new Vector3(1, 0, 0), new Vector3(0, 0, 1)), // +Y north\r\n        new FileFaceOrientation(\"down\", new Vector3(0, -1, 0), new Vector3(1, 0, 0), new Vector3(0, 0, -1)), // -Y south\r\n        new FileFaceOrientation(\"front\", new Vector3(0, 0, 1), new Vector3(1, 0, 0), new Vector3(0, -1, 0)), // +Z top\r\n        new FileFaceOrientation(\"back\", new Vector3(0, 0, -1), new Vector3(-1, 0, 0), new Vector3(0, -1, 0)), // -Z bottom\r\n    ];\r\n\r\n    /** @internal */\r\n    public static MAX_HDRI_VALUE = 4096;\r\n    /** @internal */\r\n    public static PRESERVE_CLAMPED_COLORS = false;\r\n\r\n    /**\r\n     * Converts a texture to the according Spherical Polynomial data.\r\n     * This extracts the first 3 orders only as they are the only one used in the lighting.\r\n     *\r\n     * @param texture The texture to extract the information from.\r\n     * @returns The Spherical Polynomial data.\r\n     */\r\n    public static ConvertCubeMapTextureToSphericalPolynomial(texture: BaseTexture): Nullable<Promise<SphericalPolynomial>> {\r\n        if (!texture.isCube) {\r\n            // Only supports cube Textures currently.\r\n            return null;\r\n        }\r\n\r\n        texture.getScene()?.getEngine().flushFramebuffer();\r\n\r\n        const size = texture.getSize().width;\r\n        const rightPromise = texture.readPixels(0, undefined, undefined, false);\r\n        const leftPromise = texture.readPixels(1, undefined, undefined, false);\r\n\r\n        let upPromise: Nullable<Promise<ArrayBufferView>>;\r\n        let downPromise: Nullable<Promise<ArrayBufferView>>;\r\n        if (texture.isRenderTarget) {\r\n            upPromise = texture.readPixels(3, undefined, undefined, false);\r\n            downPromise = texture.readPixels(2, undefined, undefined, false);\r\n        } else {\r\n            upPromise = texture.readPixels(2, undefined, undefined, false);\r\n            downPromise = texture.readPixels(3, undefined, undefined, false);\r\n        }\r\n\r\n        const frontPromise = texture.readPixels(4, undefined, undefined, false);\r\n        const backPromise = texture.readPixels(5, undefined, undefined, false);\r\n\r\n        const gammaSpace = texture.gammaSpace;\r\n        // Always read as RGBA.\r\n        const format = Constants.TEXTUREFORMAT_RGBA;\r\n        let type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n        if (texture.textureType == Constants.TEXTURETYPE_FLOAT || texture.textureType == Constants.TEXTURETYPE_HALF_FLOAT) {\r\n            type = Constants.TEXTURETYPE_FLOAT;\r\n        }\r\n\r\n        return new Promise((resolve) => {\r\n            Promise.all([leftPromise, rightPromise, upPromise, downPromise, frontPromise, backPromise]).then(([left, right, up, down, front, back]) => {\r\n                const cubeInfo: CubeMapInfo = {\r\n                    size,\r\n                    right,\r\n                    left,\r\n                    up,\r\n                    down,\r\n                    front,\r\n                    back,\r\n                    format,\r\n                    type,\r\n                    gammaSpace,\r\n                };\r\n\r\n                resolve(this.ConvertCubeMapToSphericalPolynomial(cubeInfo));\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Compute the area on the unit sphere of the rectangle defined by (x,y) and the origin\r\n     * See https://www.rorydriscoll.com/2012/01/15/cubemap-texel-solid-angle/\r\n     * @param x\r\n     * @param y\r\n     * @returns the area\r\n     */\r\n    private static _AreaElement(x: number, y: number): number {\r\n        return Math.atan2(x * y, Math.sqrt(x * x + y * y + 1));\r\n    }\r\n\r\n    /**\r\n     * Converts a cubemap to the according Spherical Polynomial data.\r\n     * This extracts the first 3 orders only as they are the only one used in the lighting.\r\n     *\r\n     * @param cubeInfo The Cube map to extract the information from.\r\n     * @returns The Spherical Polynomial data.\r\n     */\r\n    public static ConvertCubeMapToSphericalPolynomial(cubeInfo: CubeMapInfo): SphericalPolynomial {\r\n        const sphericalHarmonics = new SphericalHarmonics();\r\n        let totalSolidAngle = 0.0;\r\n\r\n        // The (u,v) range is [-1,+1], so the distance between each texel is 2/Size.\r\n        const du = 2.0 / cubeInfo.size;\r\n        const dv = du;\r\n\r\n        const halfTexel = 0.5 * du;\r\n\r\n        // The (u,v) of the first texel is half a texel from the corner (-1,-1).\r\n        const minUV = halfTexel - 1.0;\r\n\r\n        for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\r\n            const fileFace = this._FileFaces[faceIndex];\r\n            const dataArray = (<any>cubeInfo)[fileFace.name];\r\n            let v = minUV;\r\n\r\n            // TODO: we could perform the summation directly into a SphericalPolynomial (SP), which is more efficient than SphericalHarmonic (SH).\r\n            // This is possible because during the summation we do not need the SH-specific properties, e.g. orthogonality.\r\n            // Because SP is still linear, so summation is fine in that basis.\r\n            const stride = cubeInfo.format === Constants.TEXTUREFORMAT_RGBA ? 4 : 3;\r\n            for (let y = 0; y < cubeInfo.size; y++) {\r\n                let u = minUV;\r\n\r\n                for (let x = 0; x < cubeInfo.size; x++) {\r\n                    // World direction (not normalised)\r\n                    const worldDirection = fileFace.worldAxisForFileX.scale(u).add(fileFace.worldAxisForFileY.scale(v)).add(fileFace.worldAxisForNormal);\r\n                    worldDirection.normalize();\r\n\r\n                    const deltaSolidAngle =\r\n                        this._AreaElement(u - halfTexel, v - halfTexel) -\r\n                        this._AreaElement(u - halfTexel, v + halfTexel) -\r\n                        this._AreaElement(u + halfTexel, v - halfTexel) +\r\n                        this._AreaElement(u + halfTexel, v + halfTexel);\r\n\r\n                    let r = dataArray[y * cubeInfo.size * stride + x * stride + 0];\r\n                    let g = dataArray[y * cubeInfo.size * stride + x * stride + 1];\r\n                    let b = dataArray[y * cubeInfo.size * stride + x * stride + 2];\r\n\r\n                    // Prevent NaN harmonics with extreme HDRI data.\r\n                    if (isNaN(r)) {\r\n                        r = 0;\r\n                    }\r\n                    if (isNaN(g)) {\r\n                        g = 0;\r\n                    }\r\n                    if (isNaN(b)) {\r\n                        b = 0;\r\n                    }\r\n\r\n                    // Handle Integer types.\r\n                    if (cubeInfo.type === Constants.TEXTURETYPE_UNSIGNED_BYTE) {\r\n                        r /= 255;\r\n                        g /= 255;\r\n                        b /= 255;\r\n                    }\r\n\r\n                    // Handle Gamma space textures.\r\n                    if (cubeInfo.gammaSpace) {\r\n                        r = Math.pow(Clamp(r), ToLinearSpace);\r\n                        g = Math.pow(Clamp(g), ToLinearSpace);\r\n                        b = Math.pow(Clamp(b), ToLinearSpace);\r\n                    }\r\n\r\n                    // Prevent to explode in case of really high dynamic ranges.\r\n                    // sh 3 would not be enough to accurately represent it.\r\n                    const max = this.MAX_HDRI_VALUE;\r\n                    if (this.PRESERVE_CLAMPED_COLORS) {\r\n                        const currentMax = Math.max(r, g, b);\r\n                        if (currentMax > max) {\r\n                            const factor = max / currentMax;\r\n                            r *= factor;\r\n                            g *= factor;\r\n                            b *= factor;\r\n                        }\r\n                    } else {\r\n                        r = Clamp(r, 0, max);\r\n                        g = Clamp(g, 0, max);\r\n                        b = Clamp(b, 0, max);\r\n                    }\r\n\r\n                    const color = new Color3(r, g, b);\r\n\r\n                    sphericalHarmonics.addLight(worldDirection, color, deltaSolidAngle);\r\n\r\n                    totalSolidAngle += deltaSolidAngle;\r\n\r\n                    u += du;\r\n                }\r\n\r\n                v += dv;\r\n            }\r\n        }\r\n\r\n        // Solid angle for entire sphere is 4*pi\r\n        const sphereSolidAngle = 4.0 * Math.PI;\r\n\r\n        // Adjust the solid angle to allow for how many faces we processed.\r\n        const facesProcessed = 6.0;\r\n        const expectedSolidAngle = (sphereSolidAngle * facesProcessed) / 6.0;\r\n\r\n        // Adjust the harmonics so that the accumulated solid angle matches the expected solid angle.\r\n        // This is needed because the numerical integration over the cube uses a\r\n        // small angle approximation of solid angle for each texel (see deltaSolidAngle),\r\n        // and also to compensate for accumulative error due to float precision in the summation.\r\n        const correctionFactor = expectedSolidAngle / totalSolidAngle;\r\n        sphericalHarmonics.scaleInPlace(correctionFactor);\r\n\r\n        sphericalHarmonics.convertIncidentRadianceToIrradiance();\r\n        sphericalHarmonics.convertIrradianceToLambertianRadiance();\r\n\r\n        return SphericalPolynomial.FromHarmonics(sphericalHarmonics);\r\n    }\r\n}\r\n"],"names":["prototype","_partialLoadFile","url","index","loadedFiles","onfinish","onErrorCallBack","this","_loadFile","data","_internalCount","undefined","request","exception","status","statusText","_cascadeLoadFiles","scene","files","onError","_cascadeLoadImgs","texture","mimeType","loadedImages","_partialLoadImg","tokenPendingData","img","removePendingData","message","offlineProvider","addPendingData","createCubeTextureBase","rootUrl","noMipmap","onLoad","format","forcedExtension","createPolynomials","lodScale","lodOffset","fallback","beforeLoadCubeDataCallback","imageHandler","useSRGBBuffer","buffer","isCube","generateMipMaps","_lodGenerationScale","_lodGenerationOffset","_useSRGBBuffer","_caps","supportSRGBBuffers","version","isWebGPU","label","substring","_doNotHandleContextLost","_extension","_files","_buffer","originalRootUrl","_transformTextureUrl","extension","urlWithoutUriParams","split","lastDot","lastIndexOf","toLowerCase","GetExtensionFromUrl","loaderPromise","onInternalError","Warn","then","loader","onloaddata","loadCubeData","length","supportCascades","images","map","image","Uint8Array","Error","imgs","_internalTexturesCache","push","DDSD_MIPMAPCOUNT","DDPF_LUMINANCE","FourCCToInt32","value","charCodeAt","FOURCC_DXT1","FOURCC_DXT3","FOURCC_DXT5","FOURCC_DX10","DDSTools","GetDDSInfo","header","Int32Array","byteOffset","extendedHeader","headerLengthInt","mipmapCount","Math","max","fourCC","dxgiFormat","textureType","width","height","isFourCC","isRGB","isLuminance","isCompressed","_GetHalfFloatAsFloatRGBAArrayBuffer","dataOffset","dataLength","arrayBuffer","lod","destArray","Float32Array","srcData","Uint16Array","y","x","srcPos","StoreLODInAlphaChannel","_GetHalfFloatRGBAArrayBuffer","_GetFloatRGBAArrayBuffer","_GetFloatAsHalfFloatRGBAArrayBuffer","_GetFloatAsUIntRGBAArrayBuffer","_GetHalfFloatAsUIntRGBAArrayBuffer","_GetRGBAArrayBuffer","rOffset","gOffset","bOffset","aOffset","byteArray","_ExtractLongWordOrder","_GetRGBArrayBuffer","_GetLuminanceArrayBuffer","UploadDDSLevels","engine","info","loadMipmaps","faces","lodIndex","currentFace","destTypeMustBeFilterable","sphericalPolynomialFaces","sphericalPolynomial","ext","getCaps","s3tc","mip","internalCompressedFormat","blockBytes","bpp","computeFormats","supported","String","fromCharCode","_getRGBABufferInternalSizedFormat","startFace","caps","face","i","floatArray","_badOS","_badDesktopOS","textureHalfFloat","textureFloat","type","floatAvailable","textureFloatLinearFiltering","halfFloatAvailable","textureHalfFloatLinearFiltering","destType","dataGetter","dataGetterPolynomial","_uploadDataToTextureDirectly","unpackAlignment","_getUnpackAlignement","unpaddedRowSize","floor","_uploadCompressedDataToTextureDirectly","ConvertCubeMapToSphericalPolynomial","size","right","left","up","down","front","back","gammaSpace","FileFaceOrientation","name","worldAxisForNormal","worldAxisForFileX","worldAxisForFileY","CubeMapToSphericalPolynomialTools","ConvertCubeMapTextureToSphericalPolynomial","getScene","getEngine","flushFramebuffer","getSize","rightPromise","readPixels","leftPromise","upPromise","downPromise","isRenderTarget","frontPromise","backPromise","Promise","resolve","all","cubeInfo","_AreaElement","atan2","sqrt","sphericalHarmonics","totalSolidAngle","du","dv","halfTexel","minUV","faceIndex","fileFace","_FileFaces","dataArray","v","stride","u","worldDirection","scale","add","normalize","deltaSolidAngle","r","g","b","isNaN","pow","MAX_HDRI_VALUE","PRESERVE_CLAMPED_COLORS","currentMax","factor","color","addLight","correctionFactor","PI","scaleInPlace","convertIncidentRadianceToIrradiance","convertIrradianceToLambertianRadiance","FromHarmonics"],"sourceRoot":""}