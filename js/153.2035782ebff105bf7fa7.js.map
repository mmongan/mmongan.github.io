{"version":3,"file":"js/153.2035782ebff105bf7fa7.js","mappings":"oNAGA,MAAMA,EAAO,iBACPC,EAAS,+dAIV,IAAYC,iBAAiBF,KAC9B,IAAYE,iBAAiBF,GAAQC,GAGlC,MAAME,EAAqB,CAAEH,OAAMC,S","sources":["webpack://babylonjs-typescript-webpack-template/./dev/core/src/ShadersWGSL/lod.fragment.ts"],"sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"lodPixelShader\";\nconst shader = `const GammaEncodePowerApprox=1.0/2.2;varying vUV: vec2f;var textureSamplerSampler: sampler;var textureSampler: texture_2d<f32>;uniform lod: f32;uniform gamma: i32;@fragment\nfn main(input: FragmentInputs)->FragmentOutputs {fragmentOutputs.color=textureSampleLevel(textureSampler,textureSamplerSampler,fragmentInputs.vUV,uniforms.lod);if (uniforms.gamma==0) {fragmentOutputs.color=vec4f(pow(fragmentOutputs.color.rgb,vec3f(GammaEncodePowerApprox)),fragmentOutputs.color.a);}}\n`;\n// Sideeffect\nif (!ShaderStore.ShadersStoreWGSL[name]) {\n    ShaderStore.ShadersStoreWGSL[name] = shader;\n}\n/** @internal */\nexport const lodPixelShaderWGSL = { name, shader };\n"],"names":["name","shader","ShadersStoreWGSL","lodPixelShaderWGSL"],"sourceRoot":""}